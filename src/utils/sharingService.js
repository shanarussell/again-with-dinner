// Comprehensive sharing utility for shopping lists, meal plans, and recipes
export const sharingService = {
  // Format shopping list for sharing
  formatShoppingList(items, title = 'Shopping List') {
    if (!items || items.length === 0) {
      return `${title}\n\nNo items in your shopping list.`;
    }

    const formattedItems = items.map(item => {
      if (item?.amount) {
        return `‚Ä¢ ${item.amount} ${item.name}`;
      } else if (item?.quantity && item?.unit) {
        return `‚Ä¢ ${item.quantity} ${item.unit} ${item.name}`;
      } else {
        return `‚Ä¢ ${item?.name || 'Unknown item'}`;
      }
    }).join('\n');

    return `${title}\n\n${formattedItems}\n\nüçΩÔ∏è Generated by RecipeVault`;
  },

  // Format categorized shopping list for sharing
  formatCategorizedShoppingList(categorizedItems, title = 'Shopping List') {
    if (!categorizedItems || Object.keys(categorizedItems).length === 0) {
      return `${title}\n\nNo items in your shopping list.`;
    }

    const formattedCategories = Object.entries(categorizedItems)
      .filter(([_, items]) => items?.length > 0)
      .map(([category, items]) => {
        const itemsText = items.map(item => {
          if (item?.amount) {
            return `‚Ä¢ ${item.amount} ${item.name}`;
          } else if (item?.quantity && item?.unit) {
            return `‚Ä¢ ${item.quantity} ${item.unit} ${item.name}`;
          } else {
            return `‚Ä¢ ${item?.name || 'Unknown item'}`;
          }
        }).join('\n');
        return `${category}:\n${itemsText}`;
      })
      .join('\n\n');

    return `${title}\n\n${formattedCategories}\n\nüçΩÔ∏è Generated by RecipeVault`;
  },

  // Format recipe for sharing
  formatRecipe(recipe) {
    if (!recipe) return 'Recipe not available';

    const title = recipe.title || 'Untitled Recipe';
    const description = recipe.description || '';
    const servings = recipe.servings ? `Serves: ${recipe.servings}` : '';
    const cookTime = recipe.totalTime ? `Cook Time: ${recipe.totalTime} minutes` : '';
    const difficulty = recipe.difficulty ? `Difficulty: ${recipe.difficulty}` : '';
    
    const ingredients = recipe.ingredients?.length
      ? recipe.ingredients.map(ing => `‚Ä¢ ${ing.amount || ''} ${ing.unit || ''} ${ing.name}`.trim()).join('\n')
      : 'No ingredients listed';
    
    const instructions = recipe.instructions?.length
      ? recipe.instructions.map((inst, index) => `${index + 1}. ${inst.text}`).join('\n')
      : 'No instructions available';

    return `${title}\n\n${description}\n\n${servings}\n${cookTime}\n${difficulty}\n\nIngredients:\n${ingredients}\n\nInstructions:\n${instructions}\n\nüçΩÔ∏è Shared from RecipeVault`;
  },

  // Generate public recipe URL
  generatePublicRecipeUrl(recipeId) {
    const baseUrl = window.location.origin;
    return `${baseUrl}/public-recipe-view/${recipeId}`;
  },

  // Share recipe with public link
  async shareRecipe(recipe, method = 'auto') {
    if (!recipe?.id) {
      return { success: false, error: 'Recipe ID is required' };
    }

    const publicUrl = this.generatePublicRecipeUrl(recipe.id);
    const shareData = {
      title: recipe.title || 'Check out this recipe!',
      text: `${recipe.title || 'Delicious Recipe'} - ${recipe.description || ''}\n\nView the full recipe:`,
      url: publicUrl
    };

    try {
      switch (method) {
        case 'web-api':
          if (navigator.share) {
            await navigator.share(shareData);
            return { success: true, method: 'web-api' };
          }
          return { success: false, error: 'Web Share API not available' };

        case 'clipboard':
          const shareText = `${shareData.title}\n\n${shareData.text}\n${shareData.url}`;
          await this.copyToClipboard(shareText);
          return { success: true, method: 'clipboard', message: 'Recipe link copied to clipboard!' };

        case 'email':
          return this.shareViaEmail(shareData.title, `${shareData.text}\n\n${shareData.url}`);

        case 'whatsapp':
          return this.shareViaWhatsApp(`${shareData.title}\n\n${shareData.text}\n${shareData.url}`);

        case 'twitter':
          return this.shareViaTwitter(`${shareData.title}\n\n${shareData.url}`);

        case 'facebook':
          return this.shareViaFacebook(shareData.url);

        default:
          // Auto mode - try web API first, then clipboard
          if (navigator.share) {
            try {
              await navigator.share(shareData);
              return { success: true, method: 'web-api' };
            } catch (shareError) {
              // If user cancels or share fails, fall back to clipboard
              if (shareError.name === 'AbortError') {
                return { success: false, error: 'Share cancelled by user' };
              }
              // For other Web Share API errors, try clipboard as fallback
              console.warn('Web Share API failed, falling back to clipboard:', shareError);
              const shareText = `${shareData.title}\n\n${shareData.text}\n${shareData.url}`;
              const clipboardResult = await this.copyToClipboard(shareText);
              if (clipboardResult.success) {
                return { success: true, method: 'clipboard', message: 'Recipe link copied to clipboard!' };
              }
              return { success: false, error: 'Failed to share recipe' };
            }
          } else {
            const shareText = `${shareData.title}\n\n${shareData.text}\n${shareData.url}`;
            const clipboardResult = await this.copyToClipboard(shareText);
            if (clipboardResult.success) {
              return { success: true, method: 'clipboard', message: 'Recipe link copied to clipboard!' };
            }
            return { success: false, error: 'Share not supported on this device' };
          }
      }
    } catch (error) {
      console.error('Share error:', error);
      return { success: false, error: error.message || 'Failed to share recipe' };
    }
  },

  // Share using Web Share API (native sharing)
  async shareWithWebAPI(title, text) {
    if (navigator.share) {
      try {
        await navigator.share({
          title: title,
          text: text
        });
        return { success: true, method: 'web-api' };
      } catch (err) {
        if (err.name === 'AbortError') {
          return { success: false, error: 'Share cancelled', method: 'web-api' };
        }
        return { success: false, error: err.message, method: 'web-api' };
      }
    }
    return { success: false, error: 'Web Share API not available', method: 'web-api' };
  },

  // Copy to clipboard
  async copyToClipboard(text) {
    try {
      if (navigator.clipboard && navigator.clipboard.writeText) {
        await navigator.clipboard.writeText(text);
        return { success: true, method: 'clipboard' };
      } else {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
          document.execCommand('copy');
          document.body.removeChild(textArea);
          return { success: true, method: 'clipboard-fallback' };
        } catch (err) {
          document.body.removeChild(textArea);
          return { success: false, error: 'Copy failed', method: 'clipboard-fallback' };
        }
      }
    } catch (err) {
      return { success: false, error: err.message, method: 'clipboard' };
    }
  },

  // Share via email
  shareViaEmail(title, text) {
    const subject = encodeURIComponent(title);
    const body = encodeURIComponent(text);
    const mailtoLink = `mailto:?subject=${subject}&body=${body}`;
    
    try {
      window.location.href = mailtoLink;
      return { success: true, method: 'email' };
    } catch (err) {
      return { success: false, error: err.message, method: 'email' };
    }
  },

  // Share via SMS
  shareViaSMS(text) {
    const body = encodeURIComponent(text);
    const smsLink = `sms:?body=${body}`;
    
    try {
      window.location.href = smsLink;
      return { success: true, method: 'sms' };
    } catch (err) {
      return { success: false, error: err.message, method: 'sms' };
    }
  },

  // Share via WhatsApp
  shareViaWhatsApp(text) {
    const encodedText = encodeURIComponent(text);
    const whatsappLink = `https://wa.me/?text=${encodedText}`;
    
    try {
      window.open(whatsappLink, '_blank');
      return { success: true, method: 'whatsapp' };
    } catch (err) {
      return { success: false, error: err.message, method: 'whatsapp' };
    }
  },

  // Share via Twitter
  shareViaTwitter(text) {
    const encodedText = encodeURIComponent(text);
    const twitterLink = `https://twitter.com/intent/tweet?text=${encodedText}`;
    
    try {
      window.open(twitterLink, '_blank');
      return { success: true, method: 'twitter' };
    } catch (err) {
      return { success: false, error: err.message, method: 'twitter' };
    }
  },

  // Share via Facebook
  shareViaFacebook(url) {
    const encodedUrl = encodeURIComponent(url);
    const facebookLink = `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`;
    
    try {
      window.open(facebookLink, '_blank');
      return { success: true, method: 'facebook' };
    } catch (err) {
      return { success: false, error: err.message, method: 'facebook' };
    }
  },

  // Comprehensive share method that tries multiple approaches
  async shareShoppingList(items, title = 'Shopping List', options = {}) {
    const { categorized = false, preferredMethod = 'auto' } = options;
    
    // Format the shopping list
    const formattedText = categorized 
      ? this.formatCategorizedShoppingList(items, title)
      : this.formatShoppingList(items, title);

    // Try preferred method first
    if (preferredMethod === 'web-api' || preferredMethod === 'auto') {
      const webShareResult = await this.shareWithWebAPI(title, formattedText);
      if (webShareResult.success) {
        return webShareResult;
      }
    }

    // Fallback to clipboard
    if (preferredMethod === 'clipboard' || preferredMethod === 'auto') {
      const clipboardResult = await this.copyToClipboard(formattedText);
      if (clipboardResult.success) {
        return { 
          ...clipboardResult, 
          message: 'Shopping list copied to clipboard!' 
        };
      }
    }

    // If all else fails, provide the formatted text
    return { 
      success: false, 
      error: 'Unable to share',
      formattedText: formattedText 
    };
  }
};

export default sharingService;